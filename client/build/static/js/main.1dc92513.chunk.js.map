{"version":3,"sources":["queries/index.js","Components/StudentDetails.js","Components/StudentList.js","Components/AddStudent.js","Components/OneFE2List.js","Components/NavBar.js","Components/OneFE1List.js","Components/TwoFEList.js","Components/ThreeFEList.js","App.js","apollo/index.js","index.js"],"names":["getStudents","gql","getClassesQuery","addStudentMutation","StudentDetails","props","id","student","name","age","class","test1","StudentList","useState","setStudent","useQuery","loading","error","data","filteredStudents","i","students","length","push","console","log","map","onClick","e","handleClick","AddStudent","setName","setAge","classId","setClassId","test","setTest","useMutation","addStudent","onSubmit","preventDefault","variables","refetchQueries","query","className","type","value","onChange","target","classes","clas","OneFE2List","f","NavBar","exact","to","OneFE1List","TwoFEList","ThreeFEList","App","path","component","client","ApolloClient","uri","cache","InMemoryCache","ReactDOM","render","ApolloProvider","document","getElementById"],"mappings":"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","file":"static/js/main.1dc92513.chunk.js","sourcesContent":["import { gql } from \"@apollo/client\";\n\nconst getStudents = gql`\n  {\n    students {\n      name\n      age\n      test1\n      id\n      class{\n        name\n      }\n    }\n  }\n`;\n\nconst getClassesQuery = gql`\n  {\n    classes {\n      name\n      id\n    }\n  }\n`;\n\nconst addStudentMutation = gql`\n  mutation addStudent(\n    $name: String!\n    $age: String!\n    $classId: ID!\n    $test1: String!\n  ) {\n    addStudent(name: $name, age: $age, classId: $classId, test1: $test1) {\n      name\n    }\n  }\n`;\n\nconst getStudentQuery = gql`\n  query($id: ID){\n    student(id: $id){\n      id\n      name\n      age\n      test1\n      class{\n        id\n        name\n        year\n        students{\n          name\n          id\n        }\n      }\n    }\n  }\n`\n\nexport { getClassesQuery, getStudents, addStudentMutation, getStudentQuery };\n","import React from \"react\";\r\n//import { useQuery } from \"@apollo/client\";\r\n//import { getStudentQuery } from \"../queries/index\";\r\n\r\n\r\nconst StudentDetails = (props)=> {\r\n   \r\n    //console.log(props)\r\n    \r\n    \r\n    return (\r\n        <div id=\"student-details\">\r\n            <h2>Name: {props.student.name}</h2>\r\n            <h3>Age: {props.student.age}</h3>\r\n            <h3>Class: {props.student.class.name}</h3>\r\n            <h3>Test 1 Score: {props.student.test1}</h3>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default StudentDetails;","import React, { useState } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { getStudents } from \"../queries\";\nimport StudentDetails from \"./StudentDetails\";\n\n\nconst StudentList = () => {\n  const [student, setStudent] = useState(\"\");\n  \n  const { loading, error, data } = useQuery(getStudents);\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  const handleClick = (student)=> {\n    //console.log(student)\n  \n    setStudent(student);\n  };\nlet filteredStudents = [];\n\n//console.log(data.students)\n\nfor(let i = 0; i < data.students.length; i++){\n  //console.log(data.students[i].class.name)\n  if(data.students[i].class.name === \"1FE1\"){\n    //console.log(data.students[i].name)\n    filteredStudents.push(data.students[i])\n  }\n  \n}\n\nconsole.log(filteredStudents);\n  \n  return (\n    <div>\n      <ul id=\"student-list\">\n        {data.students.map((student) => (\n          <li key={student.id} onClick={(e) => handleClick(student)}>{student.name}</li>\n        ))}\n        \n      </ul>\n      {\n        student ? <StudentDetails student={student} /> \n        : <p>No Student Selected</p>\n      }\n    </div>\n  );\n};\n\nexport default StudentList;\n\n\n{/*{filteredStudents.map((f)=> (\n          <li key={f.id} onClick={(e) => handleClick(f)}>{f.name}</li>\n        ))}*/}","import React, { useState } from \"react\";\nimport { useQuery, useMutation } from \"@apollo/react-hooks\";\nimport { getClassesQuery, addStudentMutation, getStudents } from \"../queries/index\";\n\nconst AddStudent = () => {\n  const { data, loading, error } = useQuery(getClassesQuery);\n\n  const [name, setName] = useState(\"\");\n  const [age, setAge] = useState(\"\");\n  const [classId, setClassId] = useState(\"\");\n  const [test, setTest] = useState(\"\");\n  const [addStudent] = useMutation(addStudentMutation);\n\n  if (loading) return <p>Loading...</p>;\n  if (error) return <p>Error!</p>;\n\n  /*const handleSubmit = (e)=> {\n    e.preventDefault();\n    addstudent({\n      variables:{ name, age, classId },\n    });\n  };*/\n\n  return (\n    <form\n      id=\"add-student\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        addStudent({\n          variables: {\n            name,\n            age,\n            classId: classId,\n            test1: test,\n          },\n          refetchQueries: [{ query: getStudents}]\n        });\n      }}\n    >\n      <div className=\"field\">\n        <label>Student Name:</label>\n        <input\n          type=\"text\"\n          value={name}\n          onChange={(e) => setName(e.target.value)}\n        />\n      </div>\n\n      <div className=\"field\">\n        <label>Age:</label>\n        <input\n          type=\"text\"\n          value={age}\n          onChange={(e) => setAge(e.target.value)}\n        />\n      </div>\n      <div className=\"field\">\n        <label>Test1:</label>\n        <input\n          type=\"text\"\n          value={test}\n          onChange={(e) => setTest(e.target.value)}\n        />\n      </div>\n\n      <div className=\"field\">\n        <label>Class:</label>\n        <select value={classId} onChange={(e) => setClassId(e.target.value)}>\n          <option>Select Class</option>\n          {data.classes.map((clas) => (\n            <option key={clas.id} value={clas.id}>\n              {clas.name}\n            </option>\n          ))}\n        </select>\n      </div>\n\n      <button>+</button>\n    </form>\n  );\n};\n\nexport default AddStudent;\n","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getStudents } from \"../queries\";\r\nimport StudentDetails from \"./StudentDetails\";\r\n\r\nconst OneFE2List = () => {\r\n    const [student, setStudent] = useState(\"\");\r\n    \r\n    const { loading, error, data } = useQuery(getStudents);\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error!</p>;\r\n  \r\n    const handleClick = (student)=> {\r\n      //console.log(student)\r\n    \r\n      setStudent(student);\r\n    };\r\n  let filteredStudents = [];\r\n  \r\n  //console.log(data.students)\r\n  \r\n  for(let i = 0; i < data.students.length; i++){\r\n    //console.log(data.students[i].class.name)\r\n    if(data.students[i].class.name === \"1FE2\"){\r\n      //console.log(data.students[i].name)\r\n      filteredStudents.push(data.students[i])\r\n    }\r\n    \r\n  }\r\n  \r\n  console.log(filteredStudents);\r\n    \r\n    return (\r\n      <div>\r\n        <ul id=\"student-list\">\r\n        {filteredStudents.map((f)=> (\r\n            <li key={f.id} onClick={(e) => handleClick(f)}>{f.name}</li>\r\n        ))}\r\n          \r\n        </ul>\r\n        {\r\n          student ? <StudentDetails student={student} /> \r\n          : <p>No Student Selected</p>\r\n        }\r\n      </div>\r\n    );\r\n  };\r\nexport default OneFE2List;","import React from 'react';\r\nimport { Link, NavLink } from 'react-router-dom'\r\nimport { Route, BrowserRouter } from 'react-router-dom'\r\n\r\nconst NavBar = () => {\r\n    return (\r\n        <nav>\r\n            <div>\r\n                <h2>Student Tracker</h2>\r\n                <ul>\r\n                    <li><NavLink className=\"navlink\" exact to=\"/AllStudents\">All Students</NavLink></li>\r\n                    <li><NavLink className=\"navlink\" to=\"/1FE1\">1FE1</NavLink></li>\r\n                    <li><NavLink className=\"navlink\" to=\"/1FE2\">1FE2</NavLink></li>\r\n                    <li><NavLink className=\"navlink\" to=\"/2FE\">2FE</NavLink></li>\r\n                    <li><NavLink className=\"navlink\" to=\"/3FE\">3FE</NavLink></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default NavBar;","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getStudents } from \"../queries\";\r\nimport StudentDetails from \"./StudentDetails\";\r\n\r\n\r\nconst OneFE1List = () => {\r\n  const [student, setStudent] = useState(\"\");\r\n  \r\n  const { loading, error, data } = useQuery(getStudents);\r\n  if (loading) return <p>Loading...</p>;\r\n  if (error) return <p>Error!</p>;\r\n\r\n  const handleClick = (student)=> {\r\n    //console.log(student)\r\n  \r\n    setStudent(student);\r\n  };\r\nlet filteredStudents = [];\r\n\r\n//console.log(data.students)\r\n\r\nfor(let i = 0; i < data.students.length; i++){\r\n  //console.log(data.students[i].class.name)\r\n  if(data.students[i].class.name === \"1FE1\"){\r\n    //console.log(data.students[i].name)\r\n    filteredStudents.push(data.students[i])\r\n  }\r\n  \r\n}\r\n\r\nconsole.log(filteredStudents);\r\n  \r\n  return (\r\n    <div>\r\n      <ul id=\"student-list\">\r\n      {filteredStudents.map((f)=> (\r\n          <li key={f.id} onClick={(e) => handleClick(f)}>{f.name}</li>\r\n      ))}\r\n        \r\n      </ul>\r\n      {\r\n        student ? <StudentDetails student={student} /> \r\n        : <p>No Student Selected</p>\r\n      }\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default OneFE1List;","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getStudents } from \"../queries\";\r\nimport StudentDetails from \"./StudentDetails\";\r\n\r\nconst TwoFEList = () => {\r\n    const [student, setStudent] = useState(\"\");\r\n    \r\n    const { loading, error, data } = useQuery(getStudents);\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error!</p>;\r\n  \r\n    const handleClick = (student)=> {\r\n      //console.log(student)\r\n    \r\n      setStudent(student);\r\n    };\r\n  let filteredStudents = [];\r\n  \r\n  //console.log(data.students)\r\n  \r\n  for(let i = 0; i < data.students.length; i++){\r\n    //console.log(data.students[i].class.name)\r\n    if(data.students[i].class.name === \"2FE\"){\r\n      //console.log(data.students[i].name)\r\n      filteredStudents.push(data.students[i])\r\n    }\r\n    \r\n  }\r\n  \r\n  console.log(filteredStudents);\r\n    \r\n    return (\r\n      <div>\r\n        <ul id=\"student-list\">\r\n        {filteredStudents.map((f)=> (\r\n            <li key={f.id} onClick={(e) => handleClick(f)}>{f.name}</li>\r\n        ))}\r\n          \r\n        </ul>\r\n        {\r\n          student ? <StudentDetails student={student} /> \r\n          : <p>No Student Selected</p>\r\n        }\r\n      </div>\r\n    );\r\n  };\r\nexport default TwoFEList;","import React, { useState } from \"react\";\r\nimport { useQuery } from \"@apollo/client\";\r\nimport { getStudents } from \"../queries\";\r\nimport StudentDetails from \"./StudentDetails\";\r\n\r\nconst ThreeFEList = () => {\r\n    const [student, setStudent] = useState(\"\");\r\n    \r\n    const { loading, error, data } = useQuery(getStudents);\r\n    if (loading) return <p>Loading...</p>;\r\n    if (error) return <p>Error!</p>;\r\n  \r\n    const handleClick = (student)=> {\r\n      //console.log(student)\r\n    \r\n      setStudent(student);\r\n    };\r\n  let filteredStudents = [];\r\n  \r\n  //console.log(data.students)\r\n  \r\n  for(let i = 0; i < data.students.length; i++){\r\n    //console.log(data.students[i].class.name)\r\n    if(data.students[i].class.name === \"3FE\"){\r\n      //console.log(data.students[i].name)\r\n      filteredStudents.push(data.students[i])\r\n    }\r\n    \r\n  }\r\n  \r\n  console.log(filteredStudents);\r\n    \r\n    return (\r\n      <div>\r\n        <ul id=\"student-list\">\r\n        {filteredStudents.map((f)=> (\r\n            <li key={f.id} onClick={(e) => handleClick(f)}>{f.name}</li>\r\n        ))}\r\n          \r\n        </ul>\r\n        {\r\n          student ? <StudentDetails student={student} /> \r\n          : <p>No Student Selected</p>\r\n        }\r\n      </div>\r\n    );\r\n  };\r\nexport default ThreeFEList;","import React from \"react\";\n\nimport StudentList from \"./Components/StudentList\";\nimport AddStudent from \"./Components/AddStudent\";\nimport AllClasses from \"./Components/OneFE2List\";\nimport NavBar from \"./Components/NavBar\";\nimport { Route, BrowserRouter } from \"react-router-dom\";\nimport OneFE1List from \"./Components/OneFE1List\";\nimport OneFE2List from \"./Components/OneFE2List\";\nimport TwoFEList from \"./Components/TwoFEList\";\nimport ThreeFEList from \"./Components/ThreeFEList\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <NavBar />\n      <div id=\"main\">\n        <Route path='/AllStudents' component={StudentList} />\n        <Route path='/1FE1' component={OneFE1List} />\n        <Route path='/1FE2' component={OneFE2List} />\n        <Route path='/2FE' component={TwoFEList} />\n        <Route path='/3FE' component={ThreeFEList} />\n        <AddStudent />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","import { ApolloClient, InMemoryCache } from \"@apollo/client\";\n\n//Apollo client setup\nexport const client = new ApolloClient({\n  uri: \"http://localhost:4001/graphql\",\n  cache: new InMemoryCache(),\n});\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Route, BrowserRouter } from 'react-router-dom'\nimport \"./index.css\";\nimport App from \"./App\";\nimport { ApolloProvider } from \"@apollo/client\";\nimport { client } from \"./apollo/index\";\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <App />\n  </ApolloProvider>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}